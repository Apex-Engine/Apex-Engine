



//Pulling all numbers from forge and wyvern for left side UI
//Making this for aliases is also uh really sick btw
//Good thing all this won't matter because I'm pretty sure none of u fuks will even open this 


static int libapex_ui_modelpreview_list;
static int libapex_ui_modelpreview_rotl_btn;
static int libapex_ui_modelpreview_rotr_btn;
static int libapex_ui_modelpreview_scaleup_btn;
static int libapex_ui_modelpreview_scaledown_btn;
static int libapex_ui_modelpreview_search;
static int libapex_ui_modelpreview_search_btn;
static int libapex_ui_modelpreview_search_reset;
static int libapex_ui_modelpreview_anim;
static int libapex_ui_modelpreview_anim_btn;
static int libapex_ui_modelpreview_anim_reset_btn;
static int libapex_ui_modelpreview_attach;
static int libapex_ui_modelpreview_attach_btn;
static int libapex_ui_modelpreview_attach_reset_btn;

// Type: libapex_ui_modelpreviewer_model
// ===========
// individual player tracked data for model preview actor in the previewer
struct libapex_ui_modelpreviewer_model {
	int portrait;
	fixed scale;
	int angle;
};
static libapex_ui_modelpreviewer_model[LIBAPEX_MAX_PLAYERS] libapex_ui_modelpreview;

// libapex_ui_modelpreviewer_init
// ==================
// Creates the model previewer ui panel (except portrait, which is separate
// for each player)
void libapex_ui_modelpreviewer_init() {
	int i;
	int nmodels = CatalogEntryCount(c_gameCatalogModel);

	libapex_ui_modelpreviewer = libapex_create_dialog(600, 700, c_anchorRight, 60, -150);
	libapex_ui_modelpreview_list = libapex_create_dialog_list(libapex_ui_modelpreviewer, 260, 382, c_anchorTopLeft, 14, 44);

	// portrait model adjustment buttons
	libapex_ui_modelpreview_rotr_btn = libapex_create_dialog_btn(libapex_ui_modelpreviewer, 40, 40, c_anchorTopRight, 85, 370, "Rotate right", "" );
	libapex_ui_modelpreview_scaleup_btn = libapex_create_dialog_btn(libapex_ui_modelpreviewer, 40, 40, c_anchorTopRight, 130, 370, "Scale up", "" );
	libapex_ui_modelpreview_scaledown_btn = libapex_create_dialog_btn(libapex_ui_modelpreviewer, 40, 40, c_anchorTopRight, 160, 370, "Scale down", "" );
	libapex_ui_modelpreview_rotl_btn = libapex_create_dialog_btn(libapex_ui_modelpreviewer, 40, 40, c_anchorTopRight, 205, 370, "Rotate left", "" );

	// search bar
	libapex_ui_modelpreview_search = libapex_create_dialog_editbox(libapex_ui_modelpreviewer, 480, 50, c_anchorTopLeft, 10, 430);
	libapex_ui_modelpreview_search_btn = libapex_create_dialog_btn(libapex_ui_modelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Search model", "" );
	libapex_ui_modelpreview_search_reset = libapex_create_dialog_btn(libapex_ui_modelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Reset list", "" );
	DialogControlSetPositionRelative(libapex_ui_modelpreview_search_btn, PlayerGroupAll(), c_anchorLeft, libapex_ui_modelpreview_search, c_anchorRight, 0, 0);
	DialogControlSetPositionRelative(libapex_ui_modelpreview_search_reset, PlayerGroupAll(), c_anchorLeft, libapex_ui_modelpreview_search_btn, c_anchorRight, 0, 0);

	// play animation
	libapex_ui_modelpreview_anim = libapex_create_dialog_editbox(libapex_ui_modelpreviewer, 310, 50, c_anchorTopLeft, 180, 540);
	libapex_ui_modelpreview_anim_btn = libapex_create_dialog_btn(libapex_ui_modelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Go", "" );
	libapex_ui_modelpreview_anim_reset_btn = libapex_create_dialog_btn(libapex_ui_modelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Reset", "" );
	DialogControlSetPositionRelative(libapex_ui_modelpreview_anim_btn, PlayerGroupAll(), c_anchorLeft, libapex_ui_modelpreview_anim, c_anchorRight, 0, 0);
	DialogControlSetPositionRelative(libapex_ui_modelpreview_anim_reset_btn, PlayerGroupAll(), c_anchorLeft, libapex_ui_modelpreview_anim_btn, c_anchorRight, 0, 0);

	// attach point axis test
	libapex_ui_modelpreview_attach = libapex_create_dialog_editbox(libapex_ui_modelpreviewer, 310, 50, c_anchorTopLeft, 180, 590);
	libapex_ui_modelpreview_attach_btn = libapex_create_dialog_btn(libapex_ui_modelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Go", "" );
	libapex_ui_modelpreview_attach_reset_btn = libapex_create_dialog_btn(libapex_ui_modelpreviewer, 50, 50, c_anchorCenter, 0, 0, "Reset", "" );
	DialogControlSetPositionRelative(libapex_ui_modelpreview_attach_btn, PlayerGroupAll(), c_anchorLeft, libapex_ui_modelpreview_attach, c_anchorRight, 0, 0);
	DialogControlSetPositionRelative(libapex_ui_modelpreview_attach_reset_btn, PlayerGroupAll(), c_anchorLeft, libapex_ui_modelpreview_attach_btn, c_anchorRight, 0, 0);

	// create button icons
	libapex_create_dialog_btn_icon(libapex_ui_modelpreviewer, libapex_ui_modelpreview_rotr_btn, 30, 30, LIBAPEX_UI_ICON_RIGHT);
	libapex_create_dialog_btn_icon(libapex_ui_modelpreviewer, libapex_ui_modelpreview_scaleup_btn, 30, 30, LIBAPEX_UI_ICON_PLUS);
	libapex_create_dialog_btn_icon(libapex_ui_modelpreviewer, libapex_ui_modelpreview_scaledown_btn, 30, 30, LIBAPEX_UI_ICON_MINUS);
	libapex_create_dialog_btn_icon(libapex_ui_modelpreviewer, libapex_ui_modelpreview_rotl_btn, 30, 30, LIBAPEX_UI_ICON_LEFT);
	libapex_create_dialog_btn_icon(libapex_ui_modelpreviewer, libapex_ui_modelpreview_search_btn, 40, 40, LIBAPEX_UI_ICON_SEARCH);
	libapex_create_dialog_btn_icon(libapex_ui_modelpreviewer, libapex_ui_modelpreview_search_reset, 40, 40, LIBAPEX_UI_ICON_RESET);
	libapex_create_dialog_btn_icon(libapex_ui_modelpreviewer, libapex_ui_modelpreview_anim_btn, 40, 40, LIBAPEX_UI_ICON_GO);
	libapex_create_dialog_btn_icon(libapex_ui_modelpreviewer, libapex_ui_modelpreview_anim_reset_btn, 40, 40, LIBAPEX_UI_ICON_RESET);
	libapex_create_dialog_btn_icon(libapex_ui_modelpreviewer, libapex_ui_modelpreview_attach_btn, 40, 40, LIBAPEX_UI_ICON_GO);
	libapex_create_dialog_btn_icon(libapex_ui_modelpreviewer, libapex_ui_modelpreview_attach_reset_btn, 40, 40, LIBAPEX_UI_ICON_RESET);

	// create static labels
	libapex_create_dialog_label(libapex_ui_modelpreviewer, 240, 30, c_anchorTopLeft, 14, 12, "Preview model:", LIBAPEX_UI_HEADER2);
	libapex_create_dialog_label(libapex_ui_modelpreviewer, 230, 60, c_anchorTopLeft, 14, 510, "Model options:", LIBAPEX_UI_HEADER2);
	libapex_create_dialog_label(libapex_ui_modelpreviewer, 130, 60, c_anchorTopLeft, 0, 0, "Play anim:", LIBAPEX_UI_HEADER3);
	DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, libapex_ui_modelpreview_anim, c_anchorLeft, 0, 0);
	libapex_create_dialog_label(libapex_ui_modelpreviewer, 160, 60, c_anchorTopLeft, 0, 0, "Attach test:", LIBAPEX_UI_HEADER3);
	DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, libapex_ui_modelpreview_attach, c_anchorLeft, 0, 0);

	// populate the model preview list
	// index i starts at 1 because Catalog index begins at 1
	for(i = 1; i <= nmodels && i <= LIBAPEX_NCATALOGMAX; i += 1) {
		libapex_model_catalog[i] = CatalogEntryGet(c_gameCatalogModel, i);
		DialogControlAddItem(libapex_ui_modelpreview_list, PlayerGroupAll(), StringToText(libapex_model_catalog[i]));
	}
	libapex_nmodels = i - 1; // set number of models to how many models added to list

	// add model previewer trigger events
	TriggerAddEventDialogControl(TriggerCreate("libapex_ui_model_preview_select"), c_playerAny, libapex_ui_modelpreview_list, c_triggerControlEventTypeSelectionChanged);
	TriggerAddEventDialogControl(TriggerCreate("libapex_ui_modelpreview_filter"), c_playerAny, libapex_ui_modelpreview_search_btn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("libapex_ui_modelpreview_reset"), c_playerAny, libapex_ui_modelpreview_search_reset, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("libapex_ui_modelpreview_scale_inc"), c_playerAny, libapex_ui_modelpreview_scaleup_btn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("libapex_ui_modelpreview_scale_dec"), c_playerAny, libapex_ui_modelpreview_scaledown_btn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("libapex_ui_modelpreview_angle_inc"), c_playerAny, libapex_ui_modelpreview_rotr_btn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("libapex_ui_modelpreview_angle_dec"), c_playerAny, libapex_ui_modelpreview_rotl_btn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("libapex_ui_modelpreview_anim_play"), c_playerAny, libapex_ui_modelpreview_anim_btn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("libapex_ui_modelpreview_anim_reset"), c_playerAny, libapex_ui_modelpreview_anim_reset_btn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("libapex_ui_modelpreview_attach_axis"), c_playerAny, libapex_ui_modelpreview_attach_btn, c_triggerControlEventTypeClick);
	TriggerAddEventDialogControl(TriggerCreate("libapex_ui_modelpreview_attach_reset"), c_playerAny, libapex_ui_modelpreview_attach_reset_btn, c_triggerControlEventTypeClick);

}

// libapex_ui_modelpreviewer_init_player
// =============
// Creates the portrait for each player. Each player must have its own
// dialog control portrait so that the model in the portrait will be
// unique for each player
void libapex_ui_modelpreviewer_init_player(int p) {
	libapex_ui_modelpreview[p].portrait = libapex_create_dialog_portrait(libapex_ui_modelpreviewer, 250, 300, c_anchorTopRight, 44, 56);
	libNtve_gf_SetDialogItemUseTransition(libapex_ui_modelpreview[p].portrait, false, PlayerGroupSingle(p));
	libNtve_gf_SetDialogItemCamera(libapex_ui_modelpreview[p].portrait, "Star2CameraLow01", PlayerGroupSingle(p));
	DialogControlSetVisible(libapex_ui_modelpreview[p].portrait, PlayerGroupAll(), false);
	DialogControlSetVisible(libapex_ui_modelpreview[p].portrait, PlayerGroupSingle(p), true);

	// initialize the portrait model
	libNtve_gf_SetDialogItemModel(libapex_ui_modelpreview[p].portrait, "MercHavenChick", PlayerGroupSingle(p));
	ActorSend(ActorFromDialogControl(libapex_ui_modelpreview[p].portrait), LIBAPEX_UI_MODELPREVIEW_SCALE_AMSG);

	// set player model state
	libapex_ui_modelpreview[p].scale = LIBAPEX_UI_MODELPREVIEW_SCALE_INIT;
	libapex_ui_modelpreview[p].angle = 0;
}

// libapex_ui_modelpreview_list_reset
// ================
// Resets the model list for a player:
// First removes all list items, then readds all models from catalog list
void libapex_ui_modelpreview_list_reset(int player) {
	int i;

	DialogControlRemoveAllItems(libapex_ui_modelpreview_list, PlayerGroupSingle(player));
	for( i = 1; i <= libapex_nmodels; i += 1) {
		DialogControlAddItem(libapex_ui_modelpreview_list, PlayerGroupSingle(player), StringToText(libapex_model_catalog[i]));
		libapex_model_catalog_shift[player][i] = 0;
	}
}

// libapex_ui_model_preview_select
// ==============
// Event trigger for when a model in the list has been selected
// -> Sets the model in the portrait, rescales, and resets facing
bool libapex_ui_model_preview_select(bool testConds, bool runActions) {
	string model;
	int player = EventPlayer();
	int i;
	int j;

	i = DialogControlGetSelectedItem(libapex_ui_modelpreview_list, player);
	j = libapex_model_catalog_shift[player][i]; //in case a search was run, the index will be offset
	model = libapex_model_catalog[i + j];

	// remove any attached axis attachpoint testers
	ActorSendTo(ActorFromDialogControl(libapex_ui_modelpreview[player].portrait), LIBAPEX_UI_MODELPREVIEW_ATTACHREF, "Destroy");

	// create the new actor/model
	libNtve_gf_SetDialogItemModel(libapex_ui_modelpreview[player].portrait, model, PlayerGroupSingle(EventPlayer()));
	ActorSend(ActorFromDialogControl(libapex_ui_modelpreview[player].portrait), "ModelSwap {" + model + "}");
	ActorSend(ActorFromDialogControl(libapex_ui_modelpreview[player].portrait), LIBAPEX_UI_MODELPREVIEW_SCALE_AMSG);
	ActorSend(ActorFromDialogControl(libapex_ui_modelpreview[player].portrait), "SetFacing 0");
	ActorSend(ActorFromDialogControl(libapex_ui_modelpreview[player].portrait), "AliasAdd " + LIBAPEX_UI_MODELPREVIEW_MODELREF);

	libapex_ui_modelpreview[player].scale = LIBAPEX_UI_MODELPREVIEW_SCALE_INIT;
	libapex_ui_modelpreview[player].angle = 0;

	return true;
}

// libapex_ui_modelpreview_filter
// ==============
// Filters the model list for the search terms input.
// -> Must create offsets for each catalog entry so the player can switch
//    model to proper model in list, since theres no way to get the string
//    value from a list item.
bool libapex_ui_modelpreview_filter(bool testConds, bool runActions) {
	string filter = libNtve_gf_DialogItemEditValue(libapex_ui_modelpreview_search, EventPlayer());
	int i;
	int j = 0;

	// first reset list
	libapex_ui_modelpreview_list_reset(EventPlayer());

	// search bar empty, just reset list and exit
	if( filter == "" ) {
		return true;
	}

	// else, remove entries that dont match filter
	for( i = 1; i <= libapex_nmodels; i += 1) {
		if( !StringContains(libapex_model_catalog[i], filter, c_stringAnywhere, c_stringNoCase) ) {
			DialogControlRemoveItem(libapex_ui_modelpreview_list, PlayerGroupSingle(EventPlayer()), i - j);
			j += 1;
		}
		else {
			libapex_model_catalog_shift[EventPlayer()][i - j] = j;
		}
	}

	return true;
}

// libapex_ui_modelpreview_reset
// ==============
// repopulates the model preview list with model catalog entries
bool libapex_ui_modelpreview_reset(bool testConds, bool runActions) {
	libapex_ui_modelpreview_list_reset(EventPlayer());
	return true;
}

// libapex_ui_modelpreview_scale_inc
// ===============
// Increases the model preview scale size by the increment step defined
bool libapex_ui_modelpreview_scale_inc(bool testConds, bool runActions) {
	libapex_ui_modelpreview[EventPlayer()].scale += LIBAPEX_UI_MODELPREVIEW_SCALE_STEP;
	ActorSend(ActorFromDialogControl(libapex_ui_modelpreview[EventPlayer()].portrait), "SetScale " + FixedToString(libapex_ui_modelpreview[EventPlayer()].scale, 3) + " 0.1");
	ActorSendTo(ActorFromDialogControl(libapex_ui_modelpreview[EventPlayer()].portrait), LIBAPEX_UI_MODELPREVIEW_ATTACHREF, "SetScale " + FixedToString(libapex_ui_modelpreview[EventPlayer()].scale, 3) + " 0.1");
	return true;
}

// libapex_ui_modelpreview_scale_dec
// ================
// Decreases the model preview scale size by decrement
// -> If reached min scale, dont scale any further
bool libapex_ui_modelpreview_scale_dec(bool testConds, bool runActions) {
	if( libapex_ui_modelpreview[EventPlayer()].scale > LIBAPEX_UI_MODELPREVIEW_SCALE_MIN ) {
		libapex_ui_modelpreview[EventPlayer()].scale -= LIBAPEX_UI_MODELPREVIEW_SCALE_STEP;
		ActorSend(ActorFromDialogControl(libapex_ui_modelpreview[EventPlayer()].portrait), "SetScale " + FixedToString(libapex_ui_modelpreview[EventPlayer()].scale, 3) + " 0.1");
		ActorSendTo(ActorFromDialogControl(libapex_ui_modelpreview[EventPlayer()].portrait), LIBAPEX_UI_MODELPREVIEW_ATTACHREF, "SetScale " + FixedToString(libapex_ui_modelpreview[EventPlayer()].scale, 4) + " 0.1");
	}
	return true;
}

// libapex_ui_modelpreview_angle_inc
// ==================
// Increments the facing angle of the model by the defined step constant
// (rotates towards right, CCW)
bool libapex_ui_modelpreview_angle_inc(bool testConds, bool runActions) {
	libapex_ui_modelpreview[EventPlayer()].angle += LIBAPEX_UI_MODELPREVIEW_ANGLE_STEP;
	ActorSend(ActorFromDialogControl(libapex_ui_modelpreview[EventPlayer()].portrait), "SetFacing " + IntToString(libapex_ui_modelpreview[EventPlayer()].angle));
	return true;
}

// libapex_ui_modelpreview_angle_dec
// ==================
// Decrements the facing angle of the model by the defined step constant
// (rotates towards left, CW)
bool libapex_ui_modelpreview_angle_dec(bool testConds, bool runActions) {
	libapex_ui_modelpreview[EventPlayer()].angle -= LIBAPEX_UI_MODELPREVIEW_ANGLE_STEP;
	ActorSend(ActorFromDialogControl(libapex_ui_modelpreview[EventPlayer()].portrait), "SetFacing " + IntToString(libapex_ui_modelpreview[EventPlayer()].angle));
	return true;
}

// libapex_ui_modelpreview_anim_play
// ==================
// Makes the portrait model play an animation input in the anim editbox
bool libapex_ui_modelpreview_anim_play(bool testConds, bool runActions) {
	string anim = libNtve_gf_DialogItemEditValue(libapex_ui_modelpreview_anim, EventPlayer());

	// force capitalization of the first letter
	// since animations have first letter capitalized
	anim = StringCase(StringSub(anim, 1, 1), true) + StringSub(anim, 2, StringLength(anim));

	ActorSend(ActorFromDialogControl(libapex_ui_modelpreview[EventPlayer()].portrait), "AnimPlay " + LIBAPEX_UI_MODELPREVIEW_ANIMNAME + " " + anim + " PlayForever");
	return true;
}

// libapex_ui_modelpreview_anim_reset
// ===============
// Resets (clears) the animation applied to the model preview
bool libapex_ui_modelpreview_anim_reset(bool testConds, bool runActions) {
	ActorSend(ActorFromDialogControl(libapex_ui_modelpreview[EventPlayer()].portrait), "AnimClear " + LIBAPEX_UI_MODELPREVIEW_ANIMNAME);
	return true;
}

// libapex_ui_modelpreview_anim_play
// ==================
// Attaches an axis to the input point in the attach point edit box
bool libapex_ui_modelpreview_attach_axis(bool testConds, bool runActions) {
	string attachpt = libNtve_gf_DialogItemEditValue(libapex_ui_modelpreview_attach, EventPlayer());
	if( attachpt == "" ) { // no input, exit
		return true;
	}

	// force capitalization of the first letter (most actor attach points
	// have capital first letter)
	attachpt = StringCase(StringSub(attachpt, 1, 1), true) + StringSub(attachpt, 2, StringLength(attachpt));

	// Attach an axis to the test point
	// -> must use ::LastCreatedActual to capture the Axis because it belongs
	//    to CActorModel scope, which cant be referenced with ActorLastCreated()
	ActorSendTo(ActorFromDialogControl(libapex_ui_modelpreview[EventPlayer()].portrait), LIBAPEX_UI_MODELPREVIEW_MODELREF, "AttachModelOffset {} {Axis} {" + attachpt + "}");
	ActorSend(ActorFrom("::LastCreatedActual"), "AliasAdd " + LIBAPEX_UI_MODELPREVIEW_ATTACHREF);
	ActorSendTo(ActorFromDialogControl(libapex_ui_modelpreview[EventPlayer()].portrait), LIBAPEX_UI_MODELPREVIEW_ATTACHREF, "SetScale " + FixedToString(libapex_ui_modelpreview[EventPlayer()].scale, 4) + " 0.1");

	return true;
}

// libapex_ui_modelpreview_attach_reset
// ==================
// Removes all attached axis from the preview model
bool libapex_ui_modelpreview_attach_reset(bool testConds, bool runActions) {
	ActorSendTo(ActorFromDialogControl(libapex_ui_modelpreview[EventPlayer()].portrait), LIBAPEX_UI_MODELPREVIEW_ATTACHREF, "Destroy");
	return true;
}
